{
	"swagger": "5.0.0",
	"openapi": "3.1.0",
	"info": {
		"version": "1.0.0",
		"title": "Water tracker",
		"description": "Documentation to api Water Tracker",
		"license": {
			"name": "MIT",
			"url": "https://opensource.org/licenses/MIT"
		}
	},
	"consumes": ["application/json"],
	"produces": ["application/json"],
	"servers": [{ "url": "https://project-drink-it-backend.onrender.com" }],

	"tags": [
		{
			"name": "Auth",
			"description": "Authorization endpoints"
		},
		{
			"name": "User",
			"description": "Users endpoints"
		},
		{
			"name": "Water",
			"description": "Water endpoints"
		}
	],
	"paths": {
		"/api/users/register": {
			"post": {
				"tags": ["Auth"],
				"summary": "User registration",
				"requestBody": {
					"description": "Registration's object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RegistrationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"409": {
						"description": "User email already in use",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RegistrationEmailInUseResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/users/login": {
			"post": {
				"tags": ["Auth"],
				"summary": "User Authorization",
				"requestBody": {
					"description": "Authorization object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthorizationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"401": {
						"description": "User not authorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotAuthorizationResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/users/logout": {
			"post": {
				"tags": ["Auth"],
				"summary": "User Logout",
				"security": [{ "Bearer": [] }],
				"responses": {
					"204": {
						"description": "Successful logout operation",
						"content": {}
					},

					"401": {
						"description": "User not authorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotAuthorizationResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/users/verify/{verificationToken}": {
			"get": {
				"tags": ["Auth"],
				"summary": "User verify",
				"parameters": [
					{
						"name": "verificationToken",
						"in": "path",
						"required": true,
						"schema": { "type": "string" },
						"description": "Unique verification token"
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerifyEmailResponse"
								}
							}
						}
					},
					"400": {
						"description": "User already verified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AlreadyVerifiedResponse"
								}
							}
						}
					},

					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/users/verify": {
			"post": {
				"tags": ["Auth"],
				"summary": "User verify",
				"requestBody": {
					"description": "verifications object",

					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifyRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResendEmailResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"404": {
						"description": "Users email not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								}
							}
						}
					}
				}
			}
		},

		"/api/users/current": {
			"get": {
				"tags": ["User"],
				"summary": "Get data current user",
				"security": [{ "Bearer": [] }],
				"responses": {
					"200": {
						"description": "Get current users data",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentUserResponse"
								}
							}
						}
					},

					"401": {
						"description": "User not authorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotAuthorizationResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/users/info/{_id}": {
			"patch": {
				"tags": ["User"],
				"summary": "Update user data",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" },
						"description": "Unique users id"
					}
				],
				"requestBody": {
					"description": "Users new data",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserUpdateRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentUserResponse"
								}
							}
						}
					},

					"401": {
						"description": "Not authorization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotAuthorizationUpdateUserResponse"
								}
							}
						}
					},
					"404": {
						"description": "Id is not a valid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotValidIdResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/users/dailynorma/{_id}": {
			"get": {
				"tags": ["User"],
				"summary": "Get user daily norma data",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" },
						"description": "Unique users id"
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDailyNorma"
								}
							}
						}
					},

					"401": {
						"description": "Unauthorization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotAuthorizationResponse"
								}
							}
						}
					},
					"404": {
						"description": "Id is not a valid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotValidIdResponse"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["User"],
				"summary": "Update user daily norma data",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" },
						"description": "Unique users id"
					}
				],
				"requestBody": {
					"description": "Users new daily waters norma ",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserDailyNorma"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDailyNorma"
								}
							}
						}
					},

					"401": {
						"description": "Not authorization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotAuthorizationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"404": {
						"description": "Id is not a valid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotValidIdResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/user/water/today": {
			"get": {
				"tags": ["Water"],
				"summary": "Get today water data",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "date",
						"in": "query",
						"required": true,
						"schema": { "type": "string" },
						"description": "Date water data"
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserToday"
								}
							}
						}
					},

					"401": {
						"description": "Unauthorization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/user/water/month": {
			"get": {
				"tags": ["Water"],
				"summary": "Get month water data",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "date",
						"in": "query",
						"required": true,
						"schema": { "type": "string" },
						"description": "Date water data"
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserMonth"
								}
							}
						}
					},

					"401": {
						"description": "Unauthorization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								}
							}
						}
					}
				}
			}
		},


		"/api/user/water": {
			"post": {
				"tags": ["Water"],
				"summary": "Add water entry by user",
				"security": [{ "Bearer": [] }],
				"requestBody": {
					"description": "Successful operation",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserWater"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserWaterResponse"
								}
							}
						}
					},

					"401": {
						"description": "Unauthorization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								}
							}
						}
					}
				}
			}
		},


		"/api/user/water/{_id}": {
			"delete": {
				"tags": ["Water"],
				"summary": "Delete water entry by user",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" },
						"description": "Unique day id"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"schema": { "type": "string" },
						"description": "Unique water list item id"
					}
				],

				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserWaterDelete"
								}
							}
						}
					},

					"401": {
						"description": "Unauthorization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Water"],
				"summary": "Edit water intake for a user",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" },
						"description": "Unique day id"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"schema": { "type": "string" },
						"description": "Unique water list item id"

					}
				],

				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserWaterAdd"
								}
							}
						}
					},

					"401": {
						"description": "Unauthorization",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/users/avatar": {
			"patch": {
				"tags": ["User"],
				"summary": "Update user avatar",
				"security": [{ "Bearer": [] }],
				"requestBody": {
					"description": "image file for users avatar",
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/UpdateAvatarRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateAvatarResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestBodyResponse"
								}
							}
						}
					},

					"401": {
						"description": "User not authorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotAuthorizationResponse"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"RegistrationRequest": {
				"type": "object",
				"required": ["email", "password"],
				"properties": {
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					},
					"password": {
						"minLength": 8,
						"maxLength": 64,
						"type": "string",
						"description": "User's password must have minimum 8 and max 64 symbols",
						"example": "qwerty123"
					}
				}
			},
			"VerifyRequest": {
				"type": "object",
				"required": ["email"],
				"properties": {
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					}
				}
			},
			"RegistrationResponse": {
				"type": "object",
				"required": ["_id", "email", "userName", "verificationToken", "avatarURL", "dailyNorma"],
				"properties": {
					"_id": {
						"type": "string",
						"description": "User's id",
						"example": "65b27e60a97a5a32beabeff3"
					},
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					},

					"userName": {
						"type": "string",
						"description": "User's name",
						"example": "Edik Huloian"
					},
					"verificationToken": {
						"type": "string",
						"description": "Unique verification token",
						"example": "f480ddea-3bad-437c-829c-e4419758271c"
					},
					"avatarURL": {
						"type": "string",
						"description": "User's avatarURL",
						"example": "http://www.gravatar.com/avatar/cff3cdb87812ab5158bcfa406ab3f58d?s=100"
					},
					"dailyNorma": {
						"type": "number",
						"description": "User's daily  waters norma in liters",
						"example": 2
					}
				},

				"example": { "email": "example@gmail.com", "_id": "65b27e60a97a5a32beabeff3" }
			},
			"ResendEmailResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "successful send verify email",
						"example": "successful send verify email "
					}
				}
			},
			"VerifyEmailResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "Verification successful",
						"example": "Verification successful"
					}
				}
			},
			"BadRequestBodyResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "error message",

						"example": "missing fields"
					}
				}
			},
			"NotFoundResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "error message",

						"example": "Not found"
					}
				}
			},
			"NotValidIdResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "Id is not a valid`",

						"example": "123 is not a valid id"
					}
				}
			},
			"AlreadyVerifiedResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "error message",

						"example": "Email already verified"
					}
				}
			},
			"RegistrationEmailInUseResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "error message",
						"example": "Email in use"
					}
				}
			},
			"AuthorizationResponse": {
				"type": "object",
				"required": ["user", "token"],
				"properties": {
					"token": {
						"type": "string",
						"description": "Unique JWT",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1YjI3ZTVlYTk3YTVhMzJiZWFiZWZlNSIsImlhdCI6MTcwNjE5NjU3NSwiZXhwIjoxNzA2Mjc5Mzc1fQ.i6mtVESoGHkZM92BrWnDkPxT2kfAi9yM45XpQbXN2zQ"
					},
					"user": {
						"type": "object",
						"required": [
							"willDrink",
							"activityTime",
							"weight",
							"gender",
							"dailyNorma",
							"avatarURL",
							"userName",
							"email",
							"_id"
						],
						"properties": {
							"_id": {
								"type": "string",
								"description": "User's id",
								"example": "65b27e60a97a5a32beabeff3"
							},
							"email": {
								"type": "string",
								"description": "User's email",
								"format": "email"
							},

							"userName": {
								"type": "string",
								"description": "User's name",
								"example": "Edik Huloian"
							},

							"avatarURL": {
								"type": "string",
								"description": "User's avatarURL",
								"example": "http://www.gravatar.com/avatar/cff3cdb87812ab5158bcfa406ab3f58d?s=100"
							},
							"dailyNorma": {
								"type": "number",
								"description": "User's daily  waters norma in liters",
								"example": 2
							},

							"gender": {
								"description": "User's gender",
								"example": "woman",
								"enum": ["woman", "man"]
							},
							"weight": {
								"description": "User's weight",
								"type": "number",
								"example": "60"
							},
							"activityTime": {
								"description": "User's activity time",
								"type": "number",
								"example": "5"
							},
							"willDrink": {
								"description": "User's will drink",
								"type": "number",
								"example": "5"
							}
						}
					}
				}
			},
			"UnauthorizationResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "error message",

						"example": "Email or password is wrong"
					}
				}
			},
			"NotAuthorizationResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "error message",

						"example": "Not authorized"
					}
				}
			},
			"NotAuthorizationUpdateUserResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"description": "error message",
						"enum": [
							"Not authorized",
							"Email or password is wrong",
							"outdated password is wrong",
							"outdated password is wrong",
							"newPassword  is absent",
							"repeatedNewPassword  is absent",
							"new password and repeated new password must be the same"
						],
						"example": "Not authorized"
					}
				}
			},
			"CurrentUserResponse": {
				"type": "object",
				"required": ["_id", "email", "userName", "dailyNorma", "avatarURL", "gender"],
				"properties": {
					"_id": {
						"type": "string",
						"description": "User's id",
						"example": "65b27e60a97a5a32beabeff3"
					},
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					},

					"userName": {
						"type": "string",
						"description": "User's name",
						"example": "Edik Huloian"
					},

					"avatarURL": {
						"type": "string",
						"description": "User's avatarURL",
						"example": "http://www.gravatar.com/avatar/cff3cdb87812ab5158bcfa406ab3f58d?s=100"
					},
					"dailyNorma": {
						"type": "number",
						"description": "User's daily  waters norma in liters",
						"example": 2
					},

					"gender": {
						"description": "User's gender",
						"example": "woman",
						"enum": ["woman", "man"]
					}
				}
			},
			"UserUpdateRequest": {
				"type": "object",
				"required": [
					"email",
					"userName",
					"avatarURL",
					"gender",
					"outdatedPassword",
					"newPassword",
					"repeatedNewPassword"
				],
				"properties": {
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					},

					"userName": {
						"type": "string",
						"description": "User's name",
						"example": "Edik Huloian"
					},

					"avatarURL": {
						"type": "string",
						"description": "User's avatarURL",
						"example": "http://www.gravatar.com/avatar/cff3cdb87812ab5158bcfa406ab3f58d?s=100"
					},

					"gender": {
						"description": "User's gender",
						"example": "woman",
						"enum": ["woman", "man"]
					},
					"outdatedPassword": {
						"description": "User's outdated password",
						"minLength": 8,
						"maxLength": 64,
						"type": "string",
						"example": "qwerty123"
					},
					"newPassword": {
						"description": "User's new password",
						"minLength": 8,
						"maxLength": 64,
						"type": "string",
						"example": "qwerty123"
					},
					"repeatedNewPassword": {
						"description": "Repeated user's new password",
						"minLength": 8,
						"maxLength": 64,
						"type": "string",
						"example": "qwerty123"
					}
				}
			},
			"UserDailyNorma": {
				"type": "object",
				"required": ["dailyNorma", "weight", "activityTime", "willDrink"],
				"properties": {
					"dailyNorma": {
						"type": "number",
						"description": "User's daily  waters norma",
						"example": 2
					},
					"gender": {
						"description": "User's gender",
						"example": "woman",
						"enum": ["woman", "man"]
					},
					"weight": {
						"description": "User's weight",
						"example": 60,
						"type": "number"
					},
					"activityTime": {
						"description": "User's activity time",
						"example": 3,
						"type": "number"
					},
					"willDrink": {
						"description": "User's will drink",
						"example": 2,
						"type": "number"
					}
				}
			},
			"UserWaterModel": {
				"type": "object",
				"required": ["waterModel"],
				"properties": {
					"waterModel": {
						"type": "string",
						"description": "Users water model"
					}
				}
			},
			"UserToday": {
				"type": "object",
				"required": ["waterToday"],
				"properties": {
					"_id": {
						"type": "string",
						"example": "65bec7f56a562baad96006c0"
					},
					"dailyNorma": {
						"type": "number",
						"example": 2000
					},
					"date": {
						"type": "string",
						"example": "2024-02-04T00:00:00.000Z"
					},
					"perDay": {
						"type": "number",
						"example": 3
					},
					"drankWater": {
						"type": "number",
						"example": 850
					},
					"waterlist": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"waterVolume": {
									"type": "number",
									"example": 200
								},
								"time": {
									"type": "string",
									"example": "2024-02-04T10:40"
								},
								"id": {
									"type": "string",
									"example": "f400cb7e-a4fa-4b1b-a21e-1089827edc5e"
								}
							}
						}
					},
					"owner": {
						"type": "string",
						"example": "65b95ac9d27e6be9198445e4"
					},
					"createdAt": {
						"type": "string",
						"example": "2024-02-03T23:10:45.345Z"
					},
					"updatedAt": {
						"type": "string",
						"example": "2024-02-04T20:29:14.160Z"
					}
				}
			},
			"UserMonth": {
				"type": "object",
				"required": ["waterMonth"],
				"properties": {
					"_id": {
						"type": "string",
						"example": "2024-02-01T00:00:00.000Z"
					},
					"drankWater": {
						"type": "number",
						"example": 350
					},
					"perDay": {
						"type": "number",
						"example": 2
					},
					"dailyNorma": {
						"type": "number",
						"example": 2000
					},
					"persent": {
						"type": "number",
						"example": 17.5
					}
				}
			},
			"UserWaterRate": {
				"type": "object",
				"required": ["UserWaterRate"],
				"properties": {
					"waterModel": {
						"type": "string",
						"description": "Users water rate"
					}
				}
			},
			"UserWater": {
				"type": "object",
				"required": ["UserWater"],
				"properties": {
					"waterVolume": {
						"type": "number",
						"example": 400
					},
					"time": {
						"type": "string",
						"example": "2024-02-01T18:00"
					}
				}
			},
			"UserWaterResponse": {
				"type": "object",
				"required": ["UserWater"],
				"properties": {
					"waterVolume": {
						"type": "number",
						"example": 400
					},
					"time": {
						"type": "string",
						"example": "2024-02-01T18:00"
					},
					"id": {
						"type": "string",
						"example": "3536919d-c109-4921-8068-7a663c71ea79"
					}
				}
			},
			"UserWaterAdd": {
				"type": "object",
				"required": ["waterVolume", "time"],
				"properties": {
					"waterVolume": {
						"type": "number",
						"example": 400,
						"description": "Amount of user's water intake"
					},
					"time": {
						"type": "string",
						"example": "2024-02-01T18:00",
						"description": "Time of user's water intake"
					},

					"id": {
						"type": "string",

						"example": "3536919d-c109-4921-8068-7a663c71ea79",
						"description": "Water list item id"
					}
				}
			},
			"UserWaterDelete": {
				"type": "object",
				"required": ["id"],
				"properties": {
					"id": {
						"type": "string",
						"example": "3536919d-c109-4921-8068-7a663c71ea79",
						"description": "ID of the water entry to be deleted"
					}
				}
			},
			"UpdateAvatarResponse": {
				"type": "object",
				"properties": {
					"avatarURL": {
						"type": "string",
						"description": "User's avatarURL",
						"example": "avatars\\65bd3a3571f5490ab09db11d_favicon-16x16.png"
					}
				}
			},
			"UpdateAvatarRequest": {
				"type": "object",
				"properties": {
					"avatar": {
						"type": "file",
						"description": "User's avatar"
					}
				}
			}
		},
		"securitySchemes": {
			"Bearer": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
